name: Combined DIWA Security Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DIWA CI/CD'
          path: './'
          format: 'ALL'
          out: 'dependency-check-report'

      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: dependency-check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies (if composer used)
        run: |
          if [ -f composer.json ]; then
            composer install --no-interaction --no-progress
          fi

      - name: Download SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner.zip
          echo "$(pwd)/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -Dsonar.login=$SONAR_TOKEN

  gitleaks-scan:
    name: Scan for Secrets with Gitleaks
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Gitleaks (latest)
        run: |
          GITLEAKS_VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep tag_name | cut -d '"' -f 4)
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks

      - name: Run Gitleaks Scan
        run: |
          gitleaks detect --source . \
                          --report-path gitleaks-report.json \
                          --report-format json || true

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  dast-scan:
    name: DAST Scan with Nikto
    runs-on: ubuntu-latest
    needs: gitleaks-scan

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t diwa .

      - name: Run app container
        run: |
          docker run -d --name diwa -p 8080:80 diwa
          sleep 5

      - name: Verify app is running
        run: curl --fail http://localhost:8080

      - name: Install Nikto
        run: |
          sudo apt-get update
          sudo apt-get install -y nikto

      - name: Run Nikto scan
        run: |
          nikto -h http://localhost:8080 -o nikto_report.txt -Format txt
          cat nikto_report.txt

      - name: Upload Nikto report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nikto-report
          path: nikto_report.txt

      - name: Stop app container
        run: docker stop diwa
